# Generated by Django 5.2.7 on 2025-10-22 19:05

import hashlib

from django.db import migrations


def create_chon_family_and_molecules(apps, schema_editor):
    """Crear familia CHON y moléculas básicas."""
    Molecule = apps.get_model("chemistry", "Molecule")
    Family = apps.get_model("chemistry", "Family")
    FamilyMember = apps.get_model("chemistry", "FamilyMember")

    # Crear moléculas básicas CHON
    molecules_data = [
        {
            "name": "Carbono",
            "smiles": "C",
            "canonical_smiles": "C",
            "molecular_formula": "C",
            "metadata": {"type": "atom", "element": "C", "atomic_number": 6},
        },
        {
            "name": "Hidrógeno",
            "smiles": "[H][H]",
            "canonical_smiles": "[H][H]",
            "molecular_formula": "H2",
            "metadata": {"type": "molecule", "elements": ["H"], "bond_type": "single"},
        },
        {
            "name": "Oxígeno",
            "smiles": "O=O",
            "canonical_smiles": "O=O",
            "molecular_formula": "O2",
            "metadata": {"type": "molecule", "elements": ["O"], "bond_type": "double"},
        },
        {
            "name": "Nitrógeno",
            "smiles": "N#N",
            "canonical_smiles": "N#N",
            "molecular_formula": "N2",
            "metadata": {"type": "molecule", "elements": ["N"], "bond_type": "triple"},
        },
    ]

    # Crear moléculas adicionales básicas
    additional_molecules = [
        {
            "name": "Agua",
            "smiles": "O",
            "canonical_smiles": "O",
            "molecular_formula": "H2O",
            "metadata": {
                "type": "compound",
                "elements": ["H", "O"],
                "common_name": "water",
            },
        },
        {
            "name": "Metano",
            "smiles": "C",
            "canonical_smiles": "C",
            "molecular_formula": "CH4",
            "metadata": {
                "type": "compound",
                "elements": ["C", "H"],
                "common_name": "methane",
            },
        },
        {
            "name": "Amoníaco",
            "smiles": "N",
            "canonical_smiles": "N",
            "molecular_formula": "NH3",
            "metadata": {
                "type": "compound",
                "elements": ["N", "H"],
                "common_name": "ammonia",
            },
        },
        {
            "name": "Dióxido de carbono",
            "smiles": "C(=O)=O",
            "canonical_smiles": "O=C=O",
            "molecular_formula": "CO2",
            "metadata": {
                "type": "compound",
                "elements": ["C", "O"],
                "common_name": "carbon_dioxide",
            },
        },
    ]

    created_molecules = []
    chon_molecules = []

    # Crear todas las moléculas
    for mol_data in molecules_data + additional_molecules:
        molecule, created = Molecule.objects.get_or_create(
            name=mol_data["name"],
            defaults={
                "smiles": mol_data["smiles"],
                "canonical_smiles": mol_data["canonical_smiles"],
                "molecular_formula": mol_data["molecular_formula"],
                "metadata": mol_data["metadata"],
                "frozen": False,
            },
        )
        if created:
            created_molecules.append(molecule)
            print(f"✓ Molécula creada: {molecule.name}")

        # Las primeras 4 moléculas son CHON
        if mol_data in molecules_data:
            chon_molecules.append(molecule)

    # Crear familia CHON
    chon_smiles = [mol.smiles for mol in chon_molecules]
    family_hash = hashlib.md5("|".join(sorted(chon_smiles)).encode()).hexdigest()

    chon_family, created = Family.objects.get_or_create(
        name="CHON",
        defaults={
            "description": "Familia de elementos básicos: Carbono, Hidrógeno, Oxígeno, Nitrógeno",
            "family_hash": family_hash,
            "provenance": "system_seed",
            "frozen": True,
            "metadata": {
                "type": "element_family",
                "elements": ["C", "H", "O", "N"],
                "description": "Basic organic chemistry elements",
            },
        },
    )

    if created:
        print(f"✓ Familia creada: {chon_family.name}")

        # Agregar moléculas CHON a la familia
        for molecule in chon_molecules:
            member, created = FamilyMember.objects.get_or_create(
                family=chon_family, molecule=molecule
            )
            if created:
                print(f"  + {molecule.name} agregado a familia CHON")

    print(f"✓ Proceso completado: {len(created_molecules)} moléculas, 1 familia CHON")


def reverse_seed_data(apps, schema_editor):
    """Revertir la creación de datos CHON."""
    Molecule = apps.get_model("chemistry", "Molecule")
    Family = apps.get_model("chemistry", "Family")

    # Eliminar familia CHON
    Family.objects.filter(name="CHON").delete()

    # Eliminar moléculas básicas
    molecule_names = [
        "Carbono",
        "Hidrógeno",
        "Oxígeno",
        "Nitrógeno",
        "Agua",
        "Metano",
        "Amoníaco",
        "Dióxido de carbono",
    ]

    for name in molecule_names:
        deleted_count = Molecule.objects.filter(name=name).count()
        if deleted_count > 0:
            Molecule.objects.filter(name=name).delete()
            print(f"✓ Eliminada: {name}")


class Migration(migrations.Migration):
    dependencies = [
        ("chemistry", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(
            create_chon_family_and_molecules,
            reverse_seed_data,
            hints={"chemistry": "seed_chon_data"},
        ),
    ]
