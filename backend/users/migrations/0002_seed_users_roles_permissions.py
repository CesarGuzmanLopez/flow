# Generated by Django 5.2.7 on 2025-10-22 19:30

from django.db import migrations


def seed_roles_and_permissions(apps, schema_editor):
    """Crea roles y permisos iniciales del sistema"""
    Role = apps.get_model("users", "Role")
    Permission = apps.get_model("users", "Permission")
    RolePermission = apps.get_model("users", "RolePermission")

    # Crear roles
    admin_role = Role.objects.create(
        name="Admin", description="Administrador del sistema con acceso completo"
    )

    scientist_role = Role.objects.create(
        name="Scientist", description="Científico con acceso a herramientas de química"
    )

    viewer_role = Role.objects.create(
        name="Viewer", description="Usuario con acceso de solo lectura"
    )

    # Definir permisos por recurso
    permissions_data = [
        # Usuarios
        ("users", "create", "Crear usuarios"),
        ("users", "read", "Ver usuarios"),
        ("users", "update", "Actualizar usuarios"),
        ("users", "delete", "Eliminar usuarios"),
        # Química
        ("chemistry", "create", "Crear moléculas y familias"),
        ("chemistry", "read", "Ver moléculas y familias"),
        ("chemistry", "update", "Actualizar moléculas y familias"),
        ("chemistry", "delete", "Eliminar moléculas y familias"),
        # Flujos
        ("flows", "create", "Crear flujos"),
        ("flows", "read", "Ver flujos"),
        ("flows", "update", "Actualizar flujos"),
        ("flows", "delete", "Eliminar flujos"),
        ("flows", "execute", "Ejecutar flujos"),
        # Notificaciones
        ("notifications", "create", "Crear notificaciones"),
        ("notifications", "read", "Ver notificaciones"),
        ("notifications", "update", "Actualizar notificaciones"),
        ("notifications", "delete", "Eliminar notificaciones"),
        # Sistema
        ("system", "admin", "Administración del sistema"),
        ("system", "settings", "Configurar sistema"),
    ]

    # Crear permisos
    permissions = {}
    for resource, action, description in permissions_data:
        codename = f"{action}_{resource}"
        permission = Permission.objects.create(
            name=f"{action.title()} {resource}",
            codename=codename,
            resource=resource,
            action=action,
            description=description,
        )
        permissions[codename] = permission

    # Asignar permisos a roles

    # Admin: todos los permisos
    for permission in permissions.values():
        RolePermission.objects.create(role=admin_role, permission=permission)

    # Scientist: permisos de química, flujos y lectura de usuarios
    scientist_permissions = [
        "read_users",
        "create_chemistry",
        "read_chemistry",
        "update_chemistry",
        "delete_chemistry",
        "create_flows",
        "read_flows",
        "update_flows",
        "delete_flows",
        "execute_flows",
        "read_notifications",
        "update_notifications",
    ]
    for perm_code in scientist_permissions:
        if perm_code in permissions:
            RolePermission.objects.create(
                role=scientist_role, permission=permissions[perm_code]
            )

    # Viewer: solo lectura
    viewer_permissions = [
        "read_users",
        "read_chemistry",
        "read_flows",
        "read_notifications",
    ]
    for perm_code in viewer_permissions:
        if perm_code in permissions:
            RolePermission.objects.create(
                role=viewer_role, permission=permissions[perm_code]
            )


def seed_users(apps, schema_editor):
    """Crea usuarios iniciales del sistema"""
    User = apps.get_model("users", "User")
    Role = apps.get_model("users", "Role")

    # Obtener roles
    admin_role = Role.objects.get(name="Admin")
    scientist_role = Role.objects.get(name="Scientist")
    viewer_role = Role.objects.get(name="Viewer")

    # Crear usuario administrador principal
    admin_user = User.objects.create_user(
        username="chemflow_admin",
        email="admin@chemflow.local",
        password="ChemFlow2024!",
        first_name="ChemFlow",
        last_name="Administrator",
        is_staff=True,
        is_superuser=True,
        university="ChemFlow System",
    )
    admin_user.roles.add(admin_role)

    # Crear usuarios demo
    demo_admin = User.objects.create_user(
        username="demo_admin",
        email="demo.admin@chemflow.local",
        password="demo123",
        first_name="Demo",
        last_name="Admin",
        is_staff=True,
        university="Demo University",
    )
    demo_admin.roles.add(admin_role)

    demo_scientist = User.objects.create_user(
        username="demo_scientist",
        email="demo.scientist@chemflow.local",
        password="demo123",
        first_name="Demo",
        last_name="Scientist",
        university="Demo University",
    )
    demo_scientist.roles.add(scientist_role)

    demo_viewer = User.objects.create_user(
        username="demo_viewer",
        email="demo.viewer@chemflow.local",
        password="demo123",
        first_name="Demo",
        last_name="Viewer",
        university="Demo University",
    )
    demo_viewer.roles.add(viewer_role)


def reverse_seed_users(apps, schema_editor):
    """Elimina usuarios de seed"""
    User = apps.get_model("users", "User")

    # Eliminar usuarios específicos de seed
    usernames = ["chemflow_admin", "demo_admin", "demo_scientist", "demo_viewer"]
    User.objects.filter(username__in=usernames).delete()


def reverse_seed_roles_and_permissions(apps, schema_editor):
    """Elimina roles y permisos de seed"""
    Role = apps.get_model("users", "Role")
    Permission = apps.get_model("users", "Permission")

    # Eliminar roles específicos
    Role.objects.filter(name__in=["Admin", "Scientist", "Viewer"]).delete()

    # Eliminar permisos específicos
    resources = ["users", "chemistry", "flows", "notifications", "system"]
    Permission.objects.filter(resource__in=resources).delete()


class Migration(migrations.Migration):
    dependencies = [
        ("users", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(
            seed_roles_and_permissions, reverse_seed_roles_and_permissions
        ),
        migrations.RunPython(seed_users, reverse_seed_users),
    ]
